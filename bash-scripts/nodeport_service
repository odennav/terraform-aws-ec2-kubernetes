#!/bin/bash

pip3 install yq                                                 #Install yq package to parse and manipulate YAML files.
yq --version
yum install jq

KUBESPRAYPATH="/terraform-k8s-aws_ec2/bash-scripts"                               #Define KUBESPRAYPATH
KUBE_PARENT_DIR="/terraform-k8s-aws_ec2/kubespray"
IPADDR_LIST_FILE="$KUBESPRAYPATH/ipaddr-list.txt" 
HOST_YAML="/$KUBE_PARENT_DIR/inventory/mycluster/hosts.yaml"    #Specify the full path to the YAML file

PROJECT_DIR=project
RESOURCE_DIR=card
RESOURCE_NAME=card
NODEPORT_YAML=card.yaml
NODEPORT_NUMBER=31090
RESOURCE_NAME_PATH="$KUBE_PARENT_DIR/$PROJECT_DIR/$RESOURCE_DIR/$NODEPORT_YAML"

certCopy() {                                                    #Copy admin.conf file in remote node and paste as config file in control node 
    if [ ! -d "$KUBE_PARENT_DIR" ]; then
        echo "Error: $KUBE_PARENT_DIR does not exist." >&2
        exit 1
    fi

    if [ ! -e "$HOST_YAML" ]; then
        echo "Error: $HOST_YAML does not exist." >&2
        exit 1
    fi

    FIRST_NODE=$(yq -r '.all.children.kube_control_plane.hosts | keys_unsorted | .[0]' "$HOST_YAML")

    if [ -z "$FIRST_NODE" ]; then
        echo "Error: FIRST_NODE is empty. Check your YAML structure in $HOST_YAML." >&2
        exit 1
    fi

    REMOTE_NODE=$(awk '/'"$FIRST_NODE"'/ {print $2}' "$IPADDR_LIST_FILE" | tr -d '\r')
    KUBE_CERT_DATA="/root/.kube/config"
    KUBE_KEY_DIR="/root/.kube/"

    mkdir -p /root/.kube/
    touch /root/.kube/config
    
    ssh root@$REMOTE_NODE "yum install net-tools"

    IPADDRESS=$(ssh root@$REMOTE_NODE "ifconfig eth1 | awk '/inet / {print \$2}'")

    if [ -z "$IPADDRESS" ]; then
        echo "Error: Could not retrieve the eth1 IPv4 address from the remote node." >&2
        exit 1
    fi

    scp "root@$REMOTE_NODE:/etc/kubernetes/admin.conf" "$KUBE_KEY_DIR" || exit 1
    echo "Copying admin.conf from remote node"
    rm -f "$KUBE_CERT_DATA" || exit 1
    echo "Removing default cert data"
    mv "$KUBE_KEY_DIR/admin.conf" "$KUBE_KEY_DIR/config" || exit 1
    echo "Changing name of admin.conf to config"
    sed -i.bak "s|    server: https://127.0.0.1:6443|    server: https://$IPADDRESS:6443|" "$KUBE_CERT_DATA" || exit 1
    echo "IP address of kube control node added to cert data"
}


getNodes() {
kubectl version                                                     #Confirm kubectl is installed

   if [ ! -e "$IPADDR_LIST_FILE" ]; then
        echo "Error: $IPADDR_LIST_FILE does not exist." >&2
        exit 1
    fi
   
NODE_COUNT=$(awk '/^node/ {print $1}' "$IPADDR_LIST_FILE" | sort -u | awk 'END{print NR}')

if [ ! -z "$NODE_COUNT" ]; then
  for ((num=1; num<=$NODE_COUNT; num++)); do
    NODE_STATUS[$num]="$(kubectl get nodes 2>&1 | awk -v num="$num" '/node'"${num}"' /{print $2}')"       #Confirm access to worker nodes
    echo "node${num} is ${NODE_STATUS[$num]}"

    if [ "${NODE_STATUS[$num]}" != 'Ready' ]; then
      echo "node${num} is not ready"
      kubectl get nodes 2>&1 | sed -n "/connection refused/ {s/^/connection refused to node${num}: /p}"
    fi
  done
fi
  echo "Checking list of nodes again"
  kubectl get nodes
}

crtNdPrtRscPth() {
if [ "$(pwd)" != "$KUBE_PARENT_DIR" ] || [ ! -d "$KUBE_PARENT_DIR" ]; then
  echo "Error: We have to be in $KUBE_PARENT_DIR directory." >&2

else
  mkdir -p $KUBE_PARENT_DIR/$PROJECT_DIR/$RESOURCE_DIR
  touch $RESOURCE_NAME_PATH

fi
}

crtNdPrtRsc() {                                                      #Creating Kubernetes NodePort resource
if [ ! -e "$RESOURCE_NAME_PATH" ]; then        
  echo "Error: $NODEPORT_YAML does not exist or we're in the wrong diectory." >&2
fi

cat << EOF >> $RESOURCE_NAME_PATH
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${RESOURCE_NAME}-web-deploy
  labels:
    app: ${RESOURCE_NAME}
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ${RESOURCE_NAME}
  template:
    metadata:
      labels:
        app: ${RESOURCE_NAME}
    spec:
      containers:
      - name: ${RESOURCE_NAME}-nginx
        image: victortreten/repo_test:${RESOURCE_NAME}
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: ${RESOURCE_NAME}
spec:
  selector:
    app: ${RESOURCE_NAME}
  ports:
    - port: 80
      targetPort: 80
      nodePort: ${NODEPORT_NUMBER}
  type: NodePort
EOF


}

dpyNdPrtRsc() {
kubectl apply -f $RESOURCE_NAME_PATH                                             #Deploy NodePort resource

kubectl get pods                                                                 #Confirm pods created

kubectl get svc                                                                  #Check service created

SVC_PRESENT=$(kubectl get svc 2>&1 | awk -v svc="$RESOURCE_NAME" '$1 == svc {print $1}')

if [ "$SVC_PRESENT" = "$RESOURCE_NAME" ]; then
    echo "$SVC_PRESENT service has been created"
else
    echo "Service not created" >&2
fi
}

#MAIN SCRIPT
certCopy
getNodes
crtNdPrtRscPth
crtNdPrtRsc
dpyNdPrtRsc

NODE_COUNT=$(awk '/^node/ {print $1}' "$IPADDR_LIST_FILE" | sort -u | awk 'END{print NR}')
WORKER_NODE=$(yq -r '.all.hosts.node'$NODE_COUNT'.ip' "$HOST_YAML")             #Extracting the worker node using yq

curl "${WORKER_NODE}:${NODEPORT_NUMBER}"                                        #Using curl with the extracted worker node and nodeport number

